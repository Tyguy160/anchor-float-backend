version: '3.7'
services:
  api:
    build:
      context: ./
      dockerfile: ./api/Dockerfile
    depends_on:
      - database
      - redis # Not really - but just to be safe
    restart: unless-stopped
    ports:
      - '4000:4000' # Enable access to graphql server from host machine
    volumes:
      - /opt/app/node_modules # Use node_modules inside the container
      - ./package.json:/opt/app/package.json
      - ./api:/opt/app/api # Mount local `api` source code
      - ./prisma:/opt/app/prisma
    command: npm run dev # Defined in backend package.json
  scan:
    build:
      context: ./
      dockerfile: ./scan/Dockerfile
    depends_on:
      - database
      - redis
    restart: unless-stopped
    volumes:
      - /opt/app/node_modules # Use node_modules inside the container
      - ./package.json:/opt/app/package.json
      - ./scan:/opt/app/scan # Mount local `scan` source code
      - ./amazon:/opt/app/amazon # Mount the amazon api files locally
      - ./prisma:/opt/app/prisma
    command: npm run devscan # Defined in backend package.json
  report:
    build:
      context: ./
      dockerfile: ./report/Dockerfile
    depends_on:
      - database
      - redis
    restart: unless-stopped
    volumes:
      - /opt/app/node_modules # Use node_modules inside the container
      - ./package.json:/opt/app/package.json
      - ./report:/opt/app/report # Mount local `report` source code
      - ./prisma:/opt/app/prisma
      - ./report/exports:/opt/app/report/exports
    command: npm run devreport # Defined in backend package.json
  database:
    image: postgres
    ports:
      - '5432:5432' # Enable connection to db from host machine
  redis:
    image: redis
    ports:
      - '6379:6379' # Connect with cli: `docker run -it --network="host" --rm redis redis-cli`s
